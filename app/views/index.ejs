
<%- contentFor('HeaderCss') %>
<!-- jsvectormap css -->
<link href="/assets/libs/jsvectormap/css/jsvectormap.min.css" rel="stylesheet" type="text/css" />

<!--Swiper slider css-->
<link href="/assets/libs/swiper/swiper-bundle.min.css" rel="stylesheet" type="text/css" />
<%- contentFor('body') %>


    <div class="container mt-5">
        
        

        <!-- Dropdowns for month and year selection -->
        <div class="mb-4 d-flex justify-content-center">
            <select id="monthSelect" class="form-select me-2" aria-label="Select Month">
                <!-- Options will be populated by JavaScript -->
            </select>
            <select id="yearSelect" class="form-select" aria-label="Select Year">
                <!-- Options will be populated by JavaScript -->
            </select>
        </div>

        <!-- Chart Containers -->
        <div class="card p-4 mb-4">
            <canvas id="statusChart" width="400" height="200"></canvas>
        </div>
        <div class="card p-4">
            <h2 id="auctionChartTitle" class="text-center mt-3">Auction Data</h2> <!-- Title for auction chart -->
            <canvas id="auctionChart" width="400" height="200"></canvas>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const rawDates = <%- dates %>;
        const successData = <%- successData %>;
        const warnData = <%- warnData %>;
        const errorData = <%- errorData %>;
        const auctionNames = <%- auctionNames %>;
        const auctionData = <%- auctionData %>;

        const ctx1 = document.getElementById('statusChart').getContext('2d');
        const ctx2 = document.getElementById('auctionChart').getContext('2d');
        let statusChart, auctionChart;

        // Function to get the last month and year
        const getLastMonthAndYear = () => {
            const now = new Date();
            return {
                month: now.getMonth() + 1, // Current month (1-12)
                year: now.getFullYear() // Current year
            };
        };

        // Function to populate dropdowns
        const populateDropdowns = () => {
            const { month, year } = getLastMonthAndYear();
            const monthSelect = document.getElementById('monthSelect');
            const yearSelect = document.getElementById('yearSelect');

            // Populate month dropdown
            for (let i = 1; i <= 12; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i.toString().padStart(2, '0'); // Format as mm
                monthSelect.appendChild(option);
            }
            monthSelect.value = month; // Set current month as default

            // Extract unique years from rawDates
            const yearsSet = new Set();
            rawDates.forEach(date => {
                const year = date.split('/')[2]; // Get year from date
                yearsSet.add(year);
            });

            // Populate year dropdown
            yearsSet.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearSelect.appendChild(option);
            });
            yearSelect.value = year; // Set current year as default
        };

        // Function to filter data based on selected month and year
        const filterData = () => {
            const selectedMonth = parseInt(document.getElementById('monthSelect').value);
            const selectedYear = document.getElementById('yearSelect').value; // Use string to match the year directly

            const filteredDates = [];
            const filteredSuccessData = [];
            const filteredWarnData = [];
            const filteredErrorData = [];
            const filteredAuctionData = auctionNames.map(() => []); // Create empty arrays for auction data

            rawDates.forEach((date, index) => {
                const [day, month, year] = date.split('/').map(Number); // Split date into components
                if (month === selectedMonth && year.toString() === selectedYear) {
                    filteredDates.push(date);
                    filteredSuccessData.push(successData[index]);
                    filteredWarnData.push(warnData[index]);
                    filteredErrorData.push(errorData[index]);

                    auctionNames.forEach((name, nameIndex) => {
                        const auctionValue = auctionData[nameIndex][index]; // Get auction data for this name and date
                        filteredAuctionData[nameIndex].push(auctionValue); // Push value into the corresponding array
                    });
                }
            });

            updateChart(filteredDates, filteredSuccessData, filteredWarnData, filteredErrorData, filteredAuctionData);
        };

        // Function to update the charts
        const updateChart = (dates, successData, warnData, errorData, auctionData) => {
            if (statusChart) {
                statusChart.destroy(); // Destroy previous chart instance
            }

            // Create the status chart
            statusChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Success',
                            data: successData,
                            backgroundColor: 'rgba(75, 192, 75, 0.7)',
                            borderColor: 'rgba(75, 192, 75, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Warn',
                            data: warnData,
                            backgroundColor: 'rgba(255, 206, 86, 0.7)',
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Error',
                            data: errorData,
                            backgroundColor: 'rgba(255, 99, 132, 0.7)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            stacked: true
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true
                        },
                    },
                    onClick: (event) => {
                        const activePoints = statusChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);
                        if (activePoints.length) {
                            const firstPoint = activePoints[0];
                            const selectedDate = dates[firstPoint.index];

                            // Filter auction data based on the selected date
                            const auctionIndex = rawDates.indexOf(selectedDate);
                            if (auctionIndex !== -1) {
                                const auctionDataForSelectedDate = auctionData.map(arr => arr[auctionIndex]);
                                updateAuctionChart(auctionNames, auctionDataForSelectedDate, selectedDate);
                            }
                        }
                    }
                }
            });

            // Initial call to create auction chart
            updateAuctionChart(auctionNames, auctionData[0]); // Use the first auction data as initial
        };

        // Function to update the auction chart
        const updateAuctionChart = (auctionNames, auctionData, selectedDate) => {
            if (auctionChart) {
                auctionChart.destroy(); // Destroy previous auction chart instance
            }

            // Update the title of the auction chart with the selected date
            document.getElementById('auctionChartTitle').innerText = `Auction Data for ${selectedDate}`;

            // Create the auction chart
            auctionChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: auctionNames,
                    datasets: [{
                        label: 'Auction Data',
                        data: auctionData,
                        backgroundColor: auctionNames.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.7)`),
                        borderColor: auctionNames.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`),
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        x: {
                            beginAtZero: true
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        };

        // Event listeners for dropdowns
        document.getElementById('monthSelect').addEventListener('change', filterData);
        document.getElementById('yearSelect').addEventListener('change', filterData);

        // Populate dropdowns on page load
        populateDropdowns();
        filterData(); // Initial filtering of data on load
    </script>

    <!-- Bootstrap JS Bundle (with Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <%- contentFor('FooterJs') %>